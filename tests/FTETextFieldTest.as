package tests{	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.ui.Mouse;	import flash.ui.MouseCursor;	import net.wonderfl.editor.ASParserController;	import net.wonderfl.editor.core.UIFTETextField;	import net.hires.debug.Stats;	import ro.victordramba.scriptarea.ScriptCursor;	/**	 * ...	 * @author kobayashi-taro	 */	public class FTETextFieldTest extends Sprite	{		private var _field:UIFTETextField;		private var _scrollThumb:Sprite;		private var _stats:Stats;		private var _ctrl:ASParserController;		private var _traceField:TextField;				public function FTETextFieldTest() 		{			_this = this;			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;									_field = new UIFTETextField;			_ctrl = new ASParserController(stage, _field);									var ldr:URLLoader = new URLLoader;			ldr.addEventListener(Event.COMPLETE, function ():void {				var code:String = ldr.data.toString();				code = code.replace(/\t/g, "    ");				_field.text = code;				_ctrl.sourceChanged(code, '');			});			ldr.load(new URLRequest('Tree.as'));			addChild(_field);						_scrollThumb = new Sprite;			_scrollThumb.graphics.beginFill(0x666666);			_scrollThumb.graphics.drawRect(0, 0, 15, 30);			_scrollThumb.graphics.endFill();			_scrollThumb.buttonMode = true;			_scrollThumb.tabEnabled = false;			_scrollThumb.addEventListener(MouseEvent.MOUSE_DOWN, onThumbMouseDown);			addChild(_scrollThumb);			_stats = new Stats;			addChild(_stats);						stage.addEventListener(Event.RESIZE, onResize);			stage.dispatchEvent(new Event(Event.RESIZE));						stage.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel);		}				private function onMouseWheel(e:MouseEvent):void {			_field.scrollY -= e.delta * 3;			Mouse.cursor = MouseCursor.IBEAM;			_scrollThumb.y = (stage.stageHeight - _scrollThumb.height) * _field.scrollY / _field.maxScrollV;		}				private function onThumbMouseDown(e:MouseEvent):void 		{			_scrollThumb.startDrag(false, new Rectangle(_scrollThumb.x, 0, 0, stage.stageHeight - _scrollThumb.height));			_thumbPos = _scrollThumb.y;			_downPos = mouseY;			//stage.addEventListener(Event.MOUSE_LEAVE, stopDragging);			stage.addEventListener(MouseEvent.MOUSE_UP, stopDragging);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			stage.addEventListener(Event.ENTER_FRAME, _checkMouse);		}				private var _mouseQue:Array = [];		private var _downPos:int;		private var _thumbPos:int;				private function _checkMouse(e:Event):void 		{			if (_mouseQue.length > 0) {				_field.scrollY = _mouseQue[0];				_mouseQue.length = 0;			} else if (mouseX > stage.stageWidth) {				_scrollThumb.y = _thumbPos + (mouseY - _downPos);				var ratio:Number = _scrollThumb.y / (stage.stageHeight - _scrollThumb.height);				_field.scrollY = Math.round(_field.maxScrollV * ratio);			}		}				private function onMouseMove(e:MouseEvent):void 		{			//e.updateAfterEvent();			var ratio:Number = _scrollThumb.y / (stage.stageHeight - _scrollThumb.height);			_mouseQue.unshift(Math.round(_field.maxScrollV * ratio));			//_field.scrollY = _field.maxScrollV * ratio;			if (!e.buttonDown) {				trace('button not down');				stopDragging(null);			}		}				private function stopDragging(e:Event):void 		{			//stage.removeEventListener(Event.MOUSE_LEAVE, stopDragging);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);			stage.removeEventListener(Event.ENTER_FRAME, _checkMouse);						_scrollThumb.stopDrag();		}				private function onResize(e:Event):void 		{			_field.width = stage.stageWidth;			_field.height = stage.stageHeight;			_scrollThumb.x = stage.stageWidth - _scrollThumb.width;			_stats.x = stage.stageWidth - _stats.width - _scrollThumb.width;			//_traceField.x = stage.stageWidth - 250;			//_traceField.width = 250;			//_traceField.height = stage.stageHeight;			graphics.beginFill(0);			graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);			graphics.endFill();		}				private function _trace(...args:Array):void {			//_traceField.appendText(args + '\n');			//_traceField.scrollV = _traceField.maxScrollV;		}				private static var _this:FTETextFieldTest;		public static function getInstance():FTETextFieldTest {			return _this;		}				public static function trace(...args:Array):void {			getInstance()._trace.apply(null, args);		}					}}class Format {	public var color:String;	public var bold:Boolean;	public var italic:Boolean;	public var url:String;	public var begin:int;	public var end:int;	public function Format(initObject:Object) {		color = initObject.color;		bold = initObject.bold;		italic = initObject.italic;		begin = initObject.begin;		end = initObject.end;	}}